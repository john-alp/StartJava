002 Динамический массив ArrayList - Введение
003 Динамический массив ArrayList - Как устроен
    Смотрим как устроен метод ArrayList

004 Связный список LinkedList - Введение
005 Связный список LinkedList - Как устроен
006 HashMap - Введение
007 LinkedHashMap и TreeMap
008 Множества Set
009 Методы hashcode и equals
010 Контракт hashcode и equals
011 HashMap - Как устроен
     Внутри находится массив  с определённым количеством ячеек. С помощью математического действия над хэш кодом (Например, побитовое умножение или деление с остатком.. Делим на колличество ячеек в массиве), получаем номер индекса массива, то есть номер ячейки, куда будем класть ключ-значение. Если индексы совпадают, то создаем связанный список по методу линк-лист, это значит, что в одной ячейке может быть много ключ-значений.

012 Интерфейс Comparator
     Используется, например, в методе Collection.sort(animals, new Comparator<String>) для реализации сортировки по своему методу.
     о1 > o2 return 1; o2 > 01 return -1; o1 = o2         return 0;
     Collection.sort использует сортировку по умолчанию (a,b,c  и 1,2,3)

013 Интерфейс Comparable
    Очень похож на метод Comparator, но сравнивает не два параметра, переданных в метод, а один, который сравнивается с чем-то внутри класса

014 Очередь Queue
    Это интерфейс.
    Использует метод FiFo (кто первый пришкл, тот первый ушёл)

015 Стек Stack
    Это класс.
    Использует метод LIFO (последний пришел, первый ушёл)

016 Интерфейс Iterator
    Это интерфейс. Который имплементируется во всех классах коллекции(LinkList? ArrayList итд) С помощью него мы можем "проходить" по коллекции используя for ech
    Но не можем изменять наш список. Наличие в нашем классе интерфейса Iterable дает понять Java, что нпо нашему классу можно "проходиться". Интерфейс Iterator реализует метод прохождения
